package main

import (
	"fmt"
)

func main() {
	/*
					   함수 Closure
					   익명함수를 사용할 경우 함수를 변수에 할당해서 사용 가능
					   함수 안에서 함수를 선언 및 정의 가능 -> 외부 함수에 선언된 변수에 접근 가능한 함수!
					   함수가 선언되는 순간에 함수가 실행 될 때 실체의 외부 변수에 접근하기 위한 스냅샷(객체)

				     - 사용 목적: 함수를 호출할 때 이전에 존재했던 값을 유지하기 위해서 -> 비동기 프로그래밍, 누적카운트, 무분별한 전역변수 남발 완화
		         // 클로저도 남발하면 객체들이 메모리에 존재하므로 자원을 무분별하게 사용(메모리 풀 가능성있음)
	*/

	// ex1
	multiply := func(x, y int) int { // 익명함수
		return x * y
	}

	r1 := multiply(5, 10)
	fmt.Println("ex1 :", r1)

	// ex2
	m, n := 5, 10 // 변수가 캡처
	sum := func(c int) int {
		return m + n + c //지역 변수 소멸되지 않음 (함수 호출 시 마다 사용 가능)
	}

	r2 := sum(10)
	fmt.Println("ex2 :", r2)

}
